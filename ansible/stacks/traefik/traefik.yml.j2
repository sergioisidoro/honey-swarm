version: '3.7'

services:
  traefik:
    image: traefik:v2.9.9
    volumes:
      - traefik-letsencrypt:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host
    networks:
      - public-network
    command:
      - --log.level=INFO
{% if traefik_dashboard_enabled %}
      - --api.dashboard=true
{% endif %}
      - --providers.docker=true
      - --providers.docker.swarmmode=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=public-network
      - --entrypoints.http.address=:80
      - --entrypoints.https.address=:443
{% if letsencrypt %}
      - --entrypoints.https.http.tls=true
      - --entrypoints.https.http.tls.certresolver=letsencrypt
      - --certificatesresolvers.letsencrypt.acme.email={{letsencrypt_email}}
      - --certificatesresolvers.letsencrypt.acme.storage=/letsencrypt/acme.json
      - --certificatesresolvers.letsencrypt.acme.tlschallenge=true
{% endif %}
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
        preferences:
          - spread: node.id
      labels:
        # It is here to ensure labels are not empty
        - dummy=hello
{% set middlewares = [] %}
{% if traefik_api_enabled %}
        - traefik.enable=true
        - traefik.http.services.traefik-api.loadbalancer.server.port=8080
        - traefik.http.routers.traefik-api.rule=Host(`traefik.{{ domains.main }}`)
        - traefik.http.routers.traefik-api.entrypoints=http,https
        - traefik.http.routers.traefik-api.service=api@internal
{% if traefik_web_password is defined and traefik_web_username is defined %}
        - "traefik.http.middlewares.traefik-api-auth.basicauth.users={{traefik_web_username}}:{{  traefik_web_password }}" {% set middlewares = middlewares + ['traefik-api-auth'] %}
{% endif %}
{% if internal_services_ip_whitelist is defined %}
        - traefik.http.middlewares.traefik-allowed-ips.ipwhitelist.sourcerange={{ internal_services_ip_whitelist }} {% set middlewares = middlewares + ['traefik-allowed-ips'] %}
{% endif %%}
{% if middlewares %}
{% for middleware in traefik_middlewares %}
        - traefik.http.middlewares.traefik-api.middlewares={% for middleware in traefik_middlewares %}{{ middleware }},{% endfor %}
{% endfor %}
{% endif %}
{% endif %}
      restart_policy:
        condition: any
        delay: 2s
        max_attempts: 5
        window: 120s
      update_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      rollback_config:
        parallelism: 1
        order: stop-first

networks:
  public-network:
    external: true

volumes:
    traefik-letsencrypt: